[user]
	name = Chris Keele
	email = dev@chriskeele.com
	useConfigOnly = true
[core]
	editor = vim
	excludesfile = /Users/keele/.gitrc/ignore
	autocrlf = input
  precomposeunicode = true
  whitespace = tab-in-indent,tabwidth=2

[push]
	default = simple
[rerere]
	enabled = true
[merge]
	conflictstyle = diff3
  ff = false
[diff]
  mnemonicprefix = true
[branch]
  autosetuprebase = always
[pull]
  rebase = preserve
[fetch]
  prune = true

[alias]
  # Remember all aliases expand to preserve the original arguments, so in most cases
  # the options for the root command can be provided to the alias.

  # Check for whitespace errors:
  # args: all normal diff args
  lint = diff --check

  # Append staged changes into the previous commit (good for incrementally building up a commit)
  # args: -a to add all
  # args: -m to replace message
	oops = commit --amend --no-edit

  # Shows current branch
  current = rev-parse --abbrev-ref HEAD

  # Recent log entries
  last   = log -n1 --pretty='format:Commit: %C(yellow)%H%nAuthored by: %C(magenta)%aN %Creset%ar%nCommited by: %Cblue%cN %Creset%cr%n%n%B'
  latest = log -n5 --pretty='format:%Cgreen***~~***~~***~~***~~***~~***~~***~~***~~***~~***%nCommit: %C(yellow)%H%nAuthored by: %C(magenta)%aN %Creset%ar%nCommited by: %Cblue%cN %Creset%cr%n%n%s%n'

  # Reverts unstaged changes to provided files
	discard = checkout --force --
  # Removes staged changes from working index to provided files
  unstage = reset HEAD

  # Goes back the specified number of commits in the current branch's history
  # Good for commiting as you go then rebuilding cleaner commits once you arrive
  # 1st variant keeps interim changes in the working directory, 2nd one stomps on them
  # args: n number of commits, default: 1
	rollback = "!rollback(){ cd ${GIT_PREFIX:-.} && git reset HEAD~${1:-1} --soft; }; rollback"
	erase    = "!rollback(){ cd ${GIT_PREFIX:-.} && git reset HEAD~${1:-1} --hard; }; rollback"

  # Adds files to index in chunks interactively and commits them after prompting for a message
	chunk    = add -p

  # Makes a branch available on the origin remote for the first time,
  # setting up tracking. Last chance for major history rewriting!
  publish = push --set-upstream origin

[filter "lfs"]
	smudge = git-lfs smudge %f
	required = true
	clean = git-lfs clean %f

# Colors in form of [foreground, <background>, <format>>] where color can be
# normal, black, red, gree, yellow, blue, magenta, cyan, or white, and format
# can be bold, dim, ul, blink, or reverse.
[color "diff"]
  plain = normal
  meta = bold
  frag = cyan
  old = red
  new = green
  commit = yellow
  whitespace = normal red
[color "branch"]
  current = green
  local = normal
  remote = red
  plain = normal
[color "status"]
  header = normal
  added = red
  updated = green
  changed = red
  untracked = red
  nobranch = red
[color "grep"]
  match = normal
[color "interactive"]
  prompt = normal
  header = normal
  help = normal
  error = normal

# The default colors are hard-coded but look something like:
# [color "diff"]
  # plain = normal
  # meta = bold
  # frag = cyan
  # old = red
  # new = green
  # commit = yellow
  # whitespace = normal red
# [color "branch"]
  # current = green
  # local = normal
  # remote = red
  # plain = normal
# [color "status"]
  # header = normal
  # added = red
  # updated = green
  # changed = red
  # untracked = red
  # nobranch = red
# [color "grep"]
  # match = normal
# [color "interactive"]
  # prompt = normal
  # header = normal
  # help = normal
  # error = normal
