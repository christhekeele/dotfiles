[user]
	name = Chris Keele
	email = christhekeele@gmail.com
	useConfigOnly = true
[core]
	editor = vim
	excludesfile = /Users/keele/.gitrc/ignore
	autocrlf = input
  precomposeunicode = true
  whitespace = tab-in-indent,tabwidth=2
	fsmonitor = false

[push]
	default = simple
[rerere]
	enabled = true
[merge]
	conflictstyle = diff3
  ff = false
	tool = diffmerge
[diff]
  mnemonicprefix = true
	tool = diffmerge
[branch]
  autosetuprebase = always
[pull]
  rebase = merges
[fetch]
  prune = true
[commit]
	cleanup = scissors

[alias]
  # Check for whitespace errors:
  # args: all normal diff args
  lint = diff --check

  # Append staged changes into the previous commit (good for incrementally building up a commit)
  # args: -a to add all
  # args: -m to replace message
	oops = commit --amend --no-edit

  # Shows current branch
  current = rev-parse --abbrev-ref HEAD

  # Shows sha of branch
  # sha = rev-parse

  last   = log -n1 --pretty='format:Commit: %C(yellow)%H%nAuthored by: %C(magenta)%aN %Creset%ar%nCommited by: %Cblue%cN %Creset%cr%n%n%B'
  latest = log -n5 --pretty='format:%Cgreen---------------------- >8 ----------------------%nCommit: %C(yellow)%H%nAuthored by: %C(magenta)%aN %Creset%ar%nCommited by: %Cblue%cN %Creset%cr%n%n%s%n'

  # Reverts unstaged changes to provided files
	discard = checkout --force --
  # Removes staged changes from working index to provided files
  unstage = reset HEAD

  # Shows SHA of common commit between two branches
  ancestor = merge-base --octopus

  # Goes back the specified number of commits in the current branch's history
  # Good for commiting as you go then rebuilding cleaner commits once you arrive
  # 1st variant keeps interim changes in the working directory, 2nd one stomps on them
  # args: n number of commits, default: 1
	rollback = "!rollback(){ cd ${GIT_PREFIX:-.} && git reset HEAD~${1:-1} --soft; }; rollback"
	erase    = "!rollback(){ cd ${GIT_PREFIX:-.} && git reset HEAD~${1:-1} --hard; }; rollback"

  # Displays alias information
  alias = "!alias(){ git config --get-regexp \"^alias.${1}\"; }; alias"

  # Finds the branches the given reference exists in
  contains = "!contains(){ git fetch && git rev-parse ${1:-HEAD} | xargs git branch -r --contains; }; contains"
	cherrypick = cherry-pick

[color "diff"]
  plain = normal
  meta = bold
  frag = cyan
  old = red
  new = green
  commit = yellow
  whitespace = normal red
[color "branch"]
  current = green
  local = normal
  remote = red
  plain = normal
[color "status"]
  header = normal
  added = red
  updated = green
  changed = red
  untracked = red
  nobranch = red
[color "grep"]
  match = normal
[color "interactive"]
  prompt = normal
  header = normal
  help = normal
  error = normal

# The default colors are hard-coded but look something like:
# [color "diff"]
  # plain = normal
  # meta = bold
  # frag = cyan
  # old = red
  # new = green
  # commit = yellow
  # whitespace = normal red
# [color "branch"]
  # current = green
  # local = normal
  # remote = red
  # plain = normal
# [color "status"]
  # header = normal
  # added = red
  # updated = green
  # changed = red
  # untracked = red
  # nobranch = red
# [color "grep"]
  # match = normal
# [color "interactive"]
  # prompt = normal
  # header = normal
  # help = normal
  # error = normal
[init]
	defaultBranch = latest
